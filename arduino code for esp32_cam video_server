#include "esp_camera.h"
#include <WiFi.h>
#include "esp_timer.h"
#include "img_converters.h"
#include "Arduino.h"
#include "fb_gfx.h"
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "esp_http_server.h"
// Removed ArduinoJson dependency - using simple strings instead

// Replace with your network credentials
const char* ssid = "DIGI-2NWb";
const char* password = "6FzzF6WzeE";

#define PART_BOUNDARY "123456789000000000000987654321"
#define LED_PIN 4  // Built-in LED pin

// Camera pins for AI Thinker ESP32-CAM
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

static const char* _STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
static const char* _STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
static const char* _STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

httpd_handle_t camera_httpd = NULL;

// Capture a single high-quality image for face recognition
static esp_err_t capture_handler(httpd_req_t *req) {
  camera_fb_t * fb = NULL;
  esp_err_t res = ESP_OK;
  
  // Turn on LED to indicate capture
  digitalWrite(LED_PIN, HIGH);
  
  fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    httpd_resp_set_status(req, "500 Internal Server Error");
    httpd_resp_send(req, "Camera Error", 12);
    digitalWrite(LED_PIN, LOW);
    return ESP_FAIL;
  }

  // Convert to high-quality JPEG for face recognition
  size_t jpg_buf_len = 0;
  uint8_t * jpg_buf = NULL;
  bool jpeg_converted = frame2jpg(fb, 90, &jpg_buf, &jpg_buf_len); // Very high quality
  
  if (!jpeg_converted) {
    Serial.println("JPEG compression failed");
    esp_camera_fb_return(fb);
    httpd_resp_set_status(req, "500 Internal Server Error");
    httpd_resp_send(req, "JPEG Error", 10);
    digitalWrite(LED_PIN, LOW);
    return ESP_FAIL;
  }

  httpd_resp_set_type(req, "image/jpeg");
  httpd_resp_set_hdr(req, "Content-Disposition", "inline; filename=capture.jpg");
  httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
  
  res = httpd_resp_send(req, (const char *)jpg_buf, jpg_buf_len);
  
  esp_camera_fb_return(fb);
  free(jpg_buf);
  digitalWrite(LED_PIN, LOW);
  
  Serial.printf("Captured image: %d bytes\n", jpg_buf_len);
  return res;
}

// Optional: Live preview stream (lower quality for monitoring)
static esp_err_t stream_handler(httpd_req_t *req) {
  camera_fb_t * fb = NULL;
  esp_err_t res = ESP_OK;
  size_t _jpg_buf_len = 0;
  uint8_t * _jpg_buf = NULL;
  char * part_buf[128];

  res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
  if(res != ESP_OK){
    return res;
  }

  while(true){
    fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Camera capture failed");
      res = ESP_FAIL;
    } else {
      // Lower quality for streaming (faster)
      bool jpeg_converted = frame2jpg(fb, 60, &_jpg_buf, &_jpg_buf_len);
      esp_camera_fb_return(fb);
      fb = NULL;
      if(!jpeg_converted){
        Serial.println("JPEG compression failed");  
        res = ESP_FAIL;
      }
    }
    
    if(res == ESP_OK){
      size_t hlen = snprintf((char *)part_buf, 128, _STREAM_PART, _jpg_buf_len);
      res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
    }
    if(res == ESP_OK){
      res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
    }
    if(res == ESP_OK){
      res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
    }
    
    if(_jpg_buf){
      free(_jpg_buf);
      _jpg_buf = NULL;
    }
    
    if(res != ESP_OK){
      break;
    }
    
    // Slower refresh for preview (saves bandwidth)
    vTaskDelay(pdMS_TO_TICKS(200)); // ~5 FPS for preview
  }
  return res;
}

// System status endpoint
static esp_err_t status_handler(httpd_req_t *req) {
  char response[512];
  snprintf(response, sizeof(response), 
    "{"
    "\"status\":\"online\","
    "\"free_heap\":%d,"
    "\"uptime\":%lu,"
    "\"wifi_rssi\":%d,"
    "\"camera\":\"ready\""
    "}", 
    ESP.getFreeHeap(), 
    millis(), 
    WiFi.RSSI()
  );
  
  httpd_resp_set_type(req, "application/json");
  httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
  httpd_resp_send(req, response, strlen(response));
  
  return ESP_OK;
}

// LED control endpoint
static esp_err_t led_handler(httpd_req_t *req) {
  if (req->method == HTTP_POST) {
    char buf[100];
    int ret = httpd_req_recv(req, buf, sizeof(buf));
    if (ret > 0) {
      buf[ret] = '\0';
      
      // Simple parsing - look for "true" or "false" in the request
      bool led_state = (strstr(buf, "true") != NULL);
      digitalWrite(LED_PIN, led_state ? HIGH : LOW);
      
      httpd_resp_set_type(req, "application/json");
      httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
      httpd_resp_send(req, "{\"success\":true}", 17);
      return ESP_OK;
    }
  }
  
  // Send 400 Bad Request manually
  httpd_resp_set_status(req, "400 Bad Request");
  httpd_resp_send(req, "Bad Request", 11);
  return ESP_FAIL;
}

void startCameraServer() {
  httpd_config_t config = HTTPD_DEFAULT_CONFIG();
  config.server_port = 80;
  config.max_uri_handlers = 16;

  // High-quality single capture for face recognition
  httpd_uri_t capture_uri = {
    .uri       = "/capture",
    .method    = HTTP_GET,
    .handler   = capture_handler,
    .user_ctx  = NULL
  };
  
  // Optional: Live preview stream  
  httpd_uri_t stream_uri = {
    .uri       = "/",
    .method    = HTTP_GET,
    .handler   = stream_handler,
    .user_ctx  = NULL
  };
  
  // System status
  httpd_uri_t status_uri = {
    .uri       = "/status",
    .method    = HTTP_GET,
    .handler   = status_handler,
    .user_ctx  = NULL
  };
  
  // LED control
  httpd_uri_t led_uri = {
    .uri       = "/led",
    .method    = HTTP_POST,
    .handler   = led_handler,
    .user_ctx  = NULL
  };

  Serial.printf("Starting camera server on port: '%d'\n", config.server_port);
  if (httpd_start(&camera_httpd, &config) == ESP_OK) {
    httpd_register_uri_handler(camera_httpd, &capture_uri);
    httpd_register_uri_handler(camera_httpd, &stream_uri);
    httpd_register_uri_handler(camera_httpd, &status_uri);
    httpd_register_uri_handler(camera_httpd, &led_uri);
    Serial.println("Camera server started successfully");
  }
}

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); //disable brownout detector
  
  Serial.begin(115200);
  Serial.setDebugOutput(false);
  
  // Initialize LED pin
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB565;
  
  // Optimized for face recognition (high quality, single shots)
  if(psramFound()){
    config.frame_size = FRAMESIZE_SVGA;    // 800x600 - excellent for face recognition
    config.jpeg_quality = 10;              // High quality
    config.fb_count = 1;                   // Single buffer (we don't need streaming speed)
    config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  } else {
    config.frame_size = FRAMESIZE_VGA;     // 640x480 - still good for face recognition
    config.jpeg_quality = 12;
    config.fb_count = 1;
    config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  }
  
  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
  
  // Optimize sensor for face recognition (good lighting, sharp images)
  sensor_t * s = esp_camera_sensor_get();
  if (s) {
    s->set_quality(s, 6);          // Very high quality for face recognition
    s->set_brightness(s, 1);       // Slightly brighter for better face visibility
    s->set_contrast(s, 2);         // Higher contrast for better features
    s->set_saturation(s, 0);       // Normal saturation
    s->set_sharpness(s, 2);        // Sharper images for better face details
    s->set_denoise(s, 0);          // No denoise to preserve face details
    s->set_gainceiling(s, GAINCEILING_4X);
    s->set_colorbar(s, 0);
    s->set_whitebal(s, 1);         // Auto white balance
    s->set_gain_ctrl(s, 1);        // Auto gain
    s->set_exposure_ctrl(s, 1);    // Auto exposure
    s->set_hmirror(s, 0);
    s->set_vflip(s, 0);
    s->set_aec2(s, 0);
    s->set_awb_gain(s, 1);
    s->set_agc_gain(s, 0);
    s->set_aec_value(s, 400);      // Good exposure for indoor faces
    
    Serial.println("Camera optimized for face recognition");
  }
  
  Serial.println("Camera initialized for face recognition");
  
  // Wi-Fi connection
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  int wifi_timeout = 0;
  while (WiFi.status() != WL_CONNECTED && wifi_timeout < 20) {
    delay(500);
    Serial.print(".");
    wifi_timeout++;
  }
  
  if(WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("WiFi connected successfully");
    Serial.print("Camera ready at: http://");
    Serial.println(WiFi.localIP());
    Serial.println("Endpoints:");
    Serial.println("  GET  /capture - High quality photo for face recognition");
    Serial.println("  GET  /        - Live preview stream");
    Serial.println("  GET  /status  - System status");
    Serial.println("  POST /led     - Control LED");
    Serial.printf("Frame size: %s\n", psramFound() ? "SVGA (800x600)" : "VGA (640x480)");
    
    startCameraServer();
    
    // Flash LED to indicate ready
    for(int i = 0; i < 3; i++) {
      digitalWrite(LED_PIN, HIGH);
      delay(200);
      digitalWrite(LED_PIN, LOW);
      delay(200);
    }
  } else {
    Serial.println();
    Serial.println("WiFi connection failed!");
  }
}

void loop() {
  delay(10);
  
  // Monitor memory and connection
  static unsigned long lastCheck = 0;
  if(millis() - lastCheck > 30000) {
    Serial.printf("Free heap: %d bytes, WiFi: %s\n", 
                  ESP.getFreeHeap(), 
                  WiFi.status() == WL_CONNECTED ? "Connected" : "Disconnected");
    lastCheck = millis();
  }
}
